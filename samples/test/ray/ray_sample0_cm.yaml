kind: ConfigMap
apiVersion: v1
metadata:
  name: rayjob-bridge-cm
data:
  # operator poll interval
  updateInterval: "20"                                                  # Poll time
  # job execution
  resourceURL: {{RESOURCE_URL}}            # URL for cluster
  # execution script
  jobdata.jobScript: |                                                  # Script - Ray code
    import ray
    import requests
    import qiskit
    import argparse

    class ParseKwargs(argparse.Action):
      def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, dict())
        for value in values:
          key, value = value.split('=')
          getattr(namespace, self.dest)[key] = value
  
    parser = argparse.ArgumentParser()
    parser.add_argument('-k', '--kwargs', nargs='*', action=ParseKwargs)
    args = parser.parse_args()
    
    numberOfIterations = int(args.kwargs["iterations"])
    print(f"Requested number of iterations is: {numberOfIterations}")

    ray.init()
    
    @ray.remote
    class Counter:
        def __init__(self):
            self.counter = 0
    
        def inc(self):
            self.counter += 1
    
        def get_counter(self):
            return self.counter
    
    counter = Counter.remote()
    
    for _ in range(numberOfIterations):
        ray.get(counter.inc.remote())
        print(ray.get(counter.get_counter.remote()))
    
    print("Requests", requests.__version__)
    print("Qiskit", qiskit.__version__)
  jobdata.scriptLocation: inline
  jobdata.scriptMetadata: |
    {
      "pip": {
        "requests":"2.26.0",
        "qiskit":"0.34.2"
      },
      "env": {
        "MY_VARIABLE1": "foo", 
        "MY_VARIABLE2": "bar"
      }
    }
  jobdata.jobParameters: |                                                  # parameters
    {
      "iterations":"7"
    }
  jobdata.scriptExtraLocation: inline
  #S3
  s3.endpoint: {{ENDPOINT}}  #S3 endpoint
  s3.secure: "false"                                                        # S3 secure
  s3.secret: {{S3_SECRET}}                                                    # S3 secret

  s3upload.bucket: {{BUCKET}}                                                  # bucket
